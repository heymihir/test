import pandas as pd

# Assume pivot_1 is your existing dataframe
# For example:
# pivot_1 = pd.DataFrame({
#     'City': ['New York', 'Los Angeles', 'Total'],
#     'TL': [100, 200, 'Total'],
#     'Value': [50, -30, 20]
# })

output_file = 'formatted_pivot.xlsx'

with pd.ExcelWriter(output_file, engine='xlsxwriter') as writer:
    # Write the dataframe starting at row 2 (Excel row 2, index 1) without headers
    pivot_1.to_excel(writer, sheet_name='Sheet1', index=False, startrow=1, header=False)
    
    workbook  = writer.book
    worksheet = writer.sheets['Sheet1']

    # -----------------------------
    # Create formats
    # -----------------------------
    # Header formats
    header_format_ab = workbook.add_format({'bold': True, 'bg_color': 'yellow'})
    header_format_others = workbook.add_format({'bold': True, 'bg_color': 'red', 'font_color': 'white'})
    
    # Data row negative value format
    negative_format = workbook.add_format({'font_color': 'red'})
    
    # Total rows format (for rows where Column A equals 'total' (case insensitive))
    total_format = workbook.add_format({'bold': True, 'bg_color': 'blue', 'font_color': 'black'})
    
    # -----------------------------
    # Write header row manually (Excel row 1, index 0)
    # -----------------------------
    for col_num, col_name in enumerate(pivot_1.columns):
        if col_num in [0, 1]:  # Column A and B
            worksheet.write(0, col_num, col_name, header_format_ab)
        else:
            worksheet.write(0, col_num, col_name, header_format_others)
    
    # -----------------------------
    # Apply conditional formatting for negative numbers
    # -----------------------------
    # Data starts at row 2 (index 1) and spans the dataframe dimensions.
    max_row, max_col = pivot_1.shape
    worksheet.conditional_format(1, 0, max_row, max_col - 1, {
        'type':     'cell',
        'criteria': '<',
        'value':    0,
        'format':   negative_format
    })

    # -----------------------------
    # Apply total row formatting
    # -----------------------------
    # Loop through the data rows and if the value in column A is 'total', re-write that row with total_format.
    for row_idx, row in pivot_1.iterrows():
        if str(row[pivot_1.columns[0]]).strip().lower() == 'total':
            # row_idx+1 because data starts on Excel row 2.
            for col_idx, col_name in enumerate(pivot_1.columns):
                worksheet.write(row_idx + 1, col_idx, row[col_name], total_format)
    
    # -----------------------------
    # Auto-adjust column widths
    # -----------------------------
    for i, col in enumerate(pivot_1.columns):
        # Compute the maximum length of data in the column and compare with header length
        column_len = max(pivot_1[col].astype(str).map(len).max(), len(col)) + 2
        worksheet.set_column(i, i, column_len)
