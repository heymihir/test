import pandas as pd

def create_avg_pivot(df):
    pivot_data = {"Region": df["Region"], "City": df["City"]}
    products = ["CUA", "EEFC", "TMD", "ASSETS"]
    for prod in products:
        avg_cols = [col for col in df.columns if col.lower().startswith(f"avg {prod.lower()}")]
        parsed = {}
        for col in avg_cols:
            dt = pd.to_datetime(col[-6:], format="%b'%y", errors="coerce")
            if dt is not pd.NaT:
                parsed[col] = dt
        sorted_cols = sorted(parsed, key=lambda c: parsed[c])
        if len(sorted_cols) < 2:
            continue
        # Change: Taking the last 3 average columns (sorted in ascending order)
        last_three = sorted_cols[-3:]
        col_oldest, col_prev, col_latest = last_three
        name_oldest = f"{prod}_{col_oldest[-6:]}"
        name_prev   = f"{prod}_{col_prev[-6:]}"
        name_latest = f"{prod}_{col_latest[-6:]}"
        pivot_data[name_oldest] = df[col_oldest]
        pivot_data[name_prev]   = df[col_prev]
        pivot_data[name_latest] = df[col_latest]
        # Change: Growth vs ME is computed as latest month minus previous month average
        growth_name = f"{prod}_Growth_vs_ME"
        pivot_data[growth_name] = df[col_latest] - df[col_prev]
    pivot_df = pd.DataFrame(pivot_data)
    pivot_df = pivot_df.groupby(["Region", "City"], as_index=False).sum()
    num_cols = pivot_df.select_dtypes(include="number").columns
    pivot_df[num_cols] = pivot_df[num_cols].round().astype(int)
    total = pivot_df[num_cols].sum()
    total["Region"] = "Total"
    total["City"] = "Total"
    pivot_df = pd.concat([pivot_df, pd.DataFrame([total])], ignore_index=True)
    return pivot_df

avg_pivot = create_avg_pivot(df_updated)
