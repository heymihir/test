import pandas as pd
import numpy as np

data = {
    'City': ['New York', 'Los Angeles', 'banglore total', 'Chicago', 'Chennai total'],
    'TL': [10, 20, 30, 40, 50],
    'Sales': [100, -50, 200, -300, 150],
    'Profit': [50, 10, -20, 30, -5],
    'Extra1': [5, 3, 7, 2, 9],
    'Extra2': [8, -2, 4, 6, 1],
    'Extra3': [12, 15, -3, 8, 6],
    'Extra4': [2, 3, 1, 5, 4],
    'Extra5': [7, 6, 5, 4, 3],
    'Extra6': [1, 2, 3, 4, 5],
    'Extra7': [9, 8, 7, 6, 5],
    'Extra8': [4, 3, 2, 1, 0]
}
df = pd.DataFrame(data)

original_columns = list(df.columns)
num_original_cols = len(original_columns)

def adjust_column_index(index):
    if index < 2:
        return index
    shift = (index - 2) // 6
    return index + shift

extra_columns = 0 if num_original_cols <= 2 else ((num_original_cols - 2 - 1) // 6 + 1)
total_columns = num_original_cols + extra_columns

group_headers = ['CUA', 'EEFC', 'TMD', 'ASSTES']
group_size = 6
gap_size = 1

with pd.ExcelWriter('formatted_pivot.xlsx', engine='xlsxwriter') as writer:
    df.to_excel(writer, index=False, sheet_name='Sheet1', startrow=2, header=False)
    workbook  = writer.book
    worksheet = writer.sheets['Sheet1']

    border = 1

    merged_header_format = workbook.add_format({
        'bold': True,
        'font_name': 'Calibri',
        'align': 'center',
        'valign': 'vcenter',
        'bg_color': '#D90019',
        'font_color': '#FFFFFF',
        'border': border
    })

    column_header_format = workbook.add_format({
        'bold': True,
        'font_name': 'Calibri',
        'align': 'center',
        'valign': 'vcenter',
        'bg_color': '#4A4A4A',
        'font_color': '#FFFFFF',
        'border': border
    })

    data_format = workbook.add_format({
        'font_name': 'Calibri',
        'font_color': '#101820',
        'border': border
    })

    negative_number_format = workbook.add_format({
        'font_name': 'Calibri',
        'font_color': '#DC143C',
        'border': border
    })

    total_row_format = workbook.add_format({
        'bold': True,
        'font_name': 'Calibri',
        'bg_color': '#D1D3D4',
        'font_color': '#101820',
        'border': border
    })

    worksheet.write_blank(0, 0, None, merged_header_format)
    worksheet.write_blank(0, 1, None, merged_header_format)

    for i, header in enumerate(group_headers):
        start_col = 2 + i * (group_size + gap_size)
        end_col = start_col + group_size - 1
        worksheet.merge_range(0, start_col, 0, end_col, header, merged_header_format)
        worksheet.write_blank(0, end_col + 1, None, merged_header_format)

    for original_index, column_name in enumerate(original_columns):
        new_column_index = adjust_column_index(original_index)
        worksheet.write(1, new_column_index, column_name, column_header_format)

    all_columns = set(range(total_columns))
    used_columns = {adjust_column_index(i) for i in range(num_original_cols)}
    blank_columns = all_columns - used_columns

    for column in blank_columns:
        worksheet.write_blank(1, column, None, data_format)

    for row_index, row in enumerate(df.itertuples(index=False), start=2):
        is_total_row = "total" in str(row[0])

        for original_index, cell_value in enumerate(row):
            new_column_index = adjust_column_index(original_index)
            cell_format = data_format

            if pd.notna(cell_value) and isinstance(cell_value, (int, float)) and cell_value < 0 and not is_total_row:
                cell_format = negative_number_format

            if is_total_row:
                cell_format = total_row_format

            worksheet.write(row_index, new_column_index, cell_value, cell_format)

        for column in blank_columns:
            worksheet.write_blank(row_index, column, None, data_format)

    for column in range(total_columns):
        column_name = ""

        for original_index in range(num_original_cols):
            if adjust_column_index(original_index) == column:
                column_name = str(original_columns[original_index])
                break

        max_length = len(column_name)

        for original_index in range(num_original_cols):
            if adjust_column_index(original_index) == column:
                col_data = df.iloc[:, original_index].astype(str)
                col_max_length = col_data.map(len).max()
                max_length = max(max_length, col_max_length)

        if column in blank_columns:
            worksheet.set_column(column, column, 3)
        else:
            worksheet.set_column(column, column, max_length + 2)

print("Excel file 'formatted_pivot.xlsx' has been created.")
