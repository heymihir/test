import pandas as pd

def preprocess(df):
    df = df.copy()
    for col in df.columns:
        if pd.api.types.is_numeric_dtype(df[col]):
            df[col] = df[col].round(4)
        elif pd.api.types.is_string_dtype(df[col]):
            df[col] = df[col].str.upper()
    return df

df_manual = preprocess(df_manual)
df_code = preprocess(df_code)
df_merged = pd.merge(df_manual, df_code, on='cust_id', suffixes=('_manual', '_code'))
cols = [col for col in df_manual.columns if col != 'cust_id']
match_rates = {}
mismatches = []
for col in cols:
    m_col, c_col = col + '_manual', col + '_code'
    mask = df_merged[m_col] == df_merged[c_col]
    match_rates[col] = mask.mean() * 100
    for cid in df_merged.loc[~mask, 'cust_id']:
        mismatches.append({'cust_id': cid, 'column': col})
df_flags = pd.DataFrame(mismatches).groupby('cust_id')['column'].apply(lambda x: ', '.join(x)).reset_index().rename(columns={'column': 'flag'})
mismatch_details = []
for _, row in df_flags.iterrows():
    cid = row['cust_id']
    flags = row['flag'].split(', ')
    rec = df_merged[df_merged['cust_id'] == cid].iloc[0]
    detail = {'cust_id': cid, 'flag': row['flag']}
    for col in flags:
        detail[col + '_manual'] = rec[col + '_manual']
        detail[col + '_code'] = rec[col + '_code']
    mismatch_details.append(detail)
df_mismatches = pd.DataFrame(mismatch_details)
print(match_rates)
print(df_mismatches)
